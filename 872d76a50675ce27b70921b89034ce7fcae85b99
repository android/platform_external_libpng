{
  "comments": [
    {
      "key": {
        "uuid": "4768b202_54c32563",
        "filename": "pngrutil.c",
        "patchSetId": 1
      },
      "lineNbr": 4093,
      "author": {
        "id": 1023211
      },
      "writtenOn": "2016-01-13T17:49:39Z",
      "side": 1,
      "message": "This block may need to be moved inside the if (ret \u003d\u003d Z_STREAM_END) block.\n\nIs it possible for inflate() to return with Z_OK but row_number and height to not be set?",
      "revId": "872d76a50675ce27b70921b89034ce7fcae85b99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07bebac6_369f7679",
        "filename": "pngrutil.c",
        "patchSetId": 1
      },
      "lineNbr": 4093,
      "author": {
        "id": 1080023
      },
      "writtenOn": "2016-01-13T18:23:35Z",
      "side": 1,
      "message": "Yes I believe it does.\n\nCan you apply/verify this fix?\n\n      if (ret !\u003d Z_OK) {\n#ifdef PNG_INDEX_SUPPORTED\n        if (png_ptr-\u003eindex) {\n          if (png_ptr-\u003erow_number !\u003d png_ptr-\u003eheight - 1) {\n            png_error(png_ptr, png_ptr-\u003ezstream.msg ? png_ptr-\u003ezstream.msg : \"Decompression error\");\n          }\n        } else\n#endif\n      {\n         png_zstream_error(png_ptr, ret);\n\n         if (output !\u003d NULL)\n            png_chunk_error(png_ptr, png_ptr-\u003ezstream.msg);\n\n         else /* checking */\n         {\n            png_chunk_benign_error(png_ptr, png_ptr-\u003ezstream.msg);\n            return;\n         }\n      }\n    }\n   } while (avail_out \u003e 0);",
      "parentUuid": "4768b202_54c32563",
      "revId": "872d76a50675ce27b70921b89034ce7fcae85b99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "676db610_139ee326",
        "filename": "pngrutil.c",
        "patchSetId": 1
      },
      "lineNbr": 4093,
      "author": {
        "id": 1023211
      },
      "writtenOn": "2016-01-13T19:23:59Z",
      "side": 1,
      "message": "I was able to verify that your patch fixes the hang with my set of pngs. I don\u0027t have access to any indexed pngs to test. Do you have any with the corruption that this code is guarding against?\n\nI\u0027m not sure this fix fix is correct. It will ignore the inflate() failure for indexed pngs if the condition (ptr-\u003erow_number !\u003d png_ptr-\u003eheight - 1) is *false*, i.e. the metadata is correct, but only zlib failed.\n\nThe #ifdef makes it hard to see what\u0027s going on. I reduced it to:\n\n      if (ret !\u003d Z_OK) {\n         if (png_ptr-\u003eindex) {\n            if (png_ptr-\u003erow_number !\u003d png_ptr-\u003eheight - 1)\n               png_error(png_ptr, png_ptr-\u003ezstream.msg ? png_ptr-\u003ezstream.msg : \"Decompression error\");\n\n            /* ignoring zlib ret value here */\n         } else {\n            png_zstream_error(png_ptr, ret);\n            if (output !\u003d NULL)\n               png_chunk_error(png_ptr, png_ptr-\u003ezstream.msg);\n            else /* checking */\n            {\n               png_chunk_benign_error(png_ptr, png_ptr-\u003ezstream.msg);\n               return;\n            }\n         }\n      }",
      "parentUuid": "07bebac6_369f7679",
      "revId": "872d76a50675ce27b70921b89034ce7fcae85b99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7b822d7_7ceb952b",
        "filename": "pngrutil.c",
        "patchSetId": 1
      },
      "lineNbr": 4093,
      "author": {
        "id": 1080023
      },
      "writtenOn": "2016-01-13T19:54:34Z",
      "side": 1,
      "message": "PNG_INDEX_SUPPORTED is not a type of PNG.  It is an optimization for partial image decoding.\n\nWhen (png_ptr-\u003eindex !\u003d NULL), it indicates that we are performing a partial image decode.  The #ifdef is necessary because the png_ptr struct has no \"index\" field unless PNG_INDEX_SUPPORTED is defined.\n\nI\u0027m not sure I understand your concerns about zlib errors.  The idea is that:\n(1) If we have reached the end of the image, we expect that the \"ret\" value is Z_OK.  If it is not, we return a fatal error.\n(2) If we are not decoding to the end of the image, we have no expectation for the value of \"ret\" and will not return an error.",
      "parentUuid": "676db610_139ee326",
      "revId": "872d76a50675ce27b70921b89034ce7fcae85b99",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}